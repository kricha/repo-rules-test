name: Enforce Branch Naming Convention

on:
  create: # Trigger on any branch creation

jobs:
  enforce-branch-naming:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the full history for all branches

      - name: Fetch all branches
        run: git fetch --all 

      - name: Determine closest parent branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          PARENT_BRANCH=""
          MIN_DISTANCE=""

          for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/ refs/remotes/ | grep -v "$CURRENT_BRANCH"); do
            BASE_COMMIT=$(git merge-base "$CURRENT_BRANCH" "$branch")
            if [[ -n "$BASE_COMMIT" ]]; then
              DISTANCE=$(git rev-list --count "$BASE_COMMIT..$CURRENT_BRANCH")
              if [[ -z "$MIN_DISTANCE" || "$DISTANCE" -lt "$MIN_DISTANCE" ]]; then
                MIN_DISTANCE=$DISTANCE
                PARENT_BRANCH=$branch
              fi
            fi
          done

          echo "Detected closest parent branch: $PARENT_BRANCH"
          
      - name: Enforce naming convention
        env:
          CURRENT_BRANCH: ${{ github.ref_name }} # The name of the created branch
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CANDIDATE_BRANCHES=("main" "dev")

          PARENT_BRANCH=""
          MIN_DISTANCE=""

          for candidate in "${CANDIDATE_BRANCHES[@]}"; do
            BASE_COMMIT=$(git merge-base "$CURRENT_BRANCH" "origin/$candidate")
            if [[ -n "$BASE_COMMIT" ]]; then
              DISTANCE=$(git rev-list --count "$BASE_COMMIT".."$CURRENT_BRANCH")
              if [[ -z "$MIN_DISTANCE" || "$DISTANCE" -lt "$MIN_DISTANCE" ]]; then
                MIN_DISTANCE=$DISTANCE
                PARENT_BRANCH=$candidate
              fi
            fi
          done

          echo "Detected parent branch: $PARENT_BRANCH"

          # Check if parent branch is `dev` and enforce naming conventions for branches created from `dev`
          if [[ "$PARENT_BRANCH" == "dev" ]] && [[ ! "$CURRENT_BRANCH" =~ ^(feature|task|fix)/.*$ ]]; then
            echo "Branch '$CURRENT_BRANCH' does not follow the naming convention ('feature/**', 'task/**' or 'fix/**') when created from 'dev'. Deleting it."
            git push origin --delete "$CURRENT_BRANCH"
            exit 0  # Use exit 0 to mark the job as successful after deletion
          fi

          # Check if parent branch is `main` and enforce naming conventions for branches created from `main`
          if [[ "$PARENT_BRANCH" == "main" ]] && [[ ! "$CURRENT_BRANCH" =~ ^hotfix/ ]] && [[ "$CURRENT_BRANCH" != "dev" ]]; then
            echo "Branch '$CURRENT_BRANCH' does not follow the naming convention ('hotfix/**' or 'dev') when created from 'main'. Deleting it."
            git push origin --delete "$CURRENT_BRANCH"
            exit 0  # Use exit 0 to mark the job as successful after deletion
          fi
