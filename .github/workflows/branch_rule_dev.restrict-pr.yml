name: Check source branch for PRs into dev

on:
  pull_request:
    branches:
      - dev

jobs:
  check-source-branch-for-dev:
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR source branch into dev is right
        env:
          CURRENT_BRANCH: ${{ github.head_ref }} # Source branch of the PR
        run: |
          # Initialize variables to store the closest parent branch and minimum distance
          PARENT_BRANCH=""
          MIN_DISTANCE=""
          
          # Fetch all branches to ensure we have the latest references
          git fetch --all
          
          # Loop through all branches except the current branch
          for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/ refs/remotes/ | grep -v "$CURRENT_BRANCH"); do
            # Remove the "origin/" prefix from remote branch names
            LOCAL_BRANCH_NAME=$(echo "$branch" | sed 's|^origin/||')
          
            # Find the common ancestor commit with the current branch
            BASE_COMMIT=$(git merge-base "$CURRENT_BRANCH" "$branch")
            
            # Ensure a common ancestor exists before proceeding
            if [[ -n "$BASE_COMMIT" ]]; then
              # Calculate the distance (number of commits) between the common ancestor and the current branch
              DISTANCE=$(git rev-list --count "$BASE_COMMIT..$CURRENT_BRANCH")
              
              # Update the closest parent branch if this branch has the shortest distance
              if [[ -z "$MIN_DISTANCE" || "$DISTANCE" -lt "$MIN_DISTANCE" ]]; then
                MIN_DISTANCE=$DISTANCE
                PARENT_BRANCH=$LOCAL_BRANCH_NAME
              fi
            fi
          done

          echo "Detected parent branch: $PARENT_BRANCH"
          
          if [[ "$PARENT_BRANCH" == "dev" ]] && [[ ! "$CURRENT_BRANCH" =~ ^(feature|task|fix)/.*$ ]]; then
            echo "Error: Only PRs from 'feature/**' or 'task/**' or 'issue/**' or 'fix/**' branches are allowed to merge into 'dev'."
            # exit 1
          fi
